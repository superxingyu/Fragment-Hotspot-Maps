import os
import subprocess
import re
import numpy as np
import decimal

# Run the LigSite program
def process_lcs(receptor_pdb, grid_space='1.0', number_of_pockets='3', SSS_threshold='6', surface_density='0.5'):
    result = subprocess.run(["lcs", "-i", receptor_pdb, "-s", grid_space, "-n", number_of_pockets, "-t", SSS_threshold, "-d", surface_density], stdout=subprocess.PIPE)
    fh = open("lcs.out", "wb")
    fh.write(result.stdout)
    fh.close()

# Get the coordinates of the mass center from LigSite output file
def get_orig():
    decimal.getcontext().prec = 3
    fh = open("lcs.out", "r")
    for line in fh:
        if line.startswith("Mass center"):
            anchor1 = re.search("\(", line)
            anchor2 = re.search("\)", line)
            center_mass = line[anchor1.end():anchor2.start()]
            mass_center_coordinates_s = np.array(center_mass.split(" "))
            mass_center_coordinates1 = mass_center_coordinates_s.astype(np.float)
            mass_center_coordinates2 = np.array([float(decimal.Decimal("%.3f" % elem)) for elem in mass_center_coordinates1])            
    fh.close()
    return mass_center_coordinates2

# Get the number of data points on the grid xyz dimensions from LigSite output file    
def get_npts():
    fh = open("lcs.out", "r")
    for line in fh:
        if line.startswith("Grid  Size"):
            anchor1 = re.search("\(", line)
            anchor2 = re.search("\)", line)
            dimension = line[anchor1.end():anchor2.start()]
            xyz_npts_s = np.array(dimension.split(" "))
            xyz_npts = xyz_npts_s.astype(np.int)
    fh.close()
    return xyz_npts  

# Run the autogrid program    
def process_autogrid(receptor_pdb, ligand_pdb, grid_center, npts):
    receptor_pdbqt = receptor_pdb[:receptor_pdb.find(".")] + ".pdbqt"
    ligand_pdbqt = ligand_pdb[:ligand_pdb.find(".")] + ".pdbqt"
    gpf = receptor_pdb[:receptor_pdb.find(".")] + ".gpf"
    glg = receptor_pdb[:receptor_pdb.find(".")] + ".glg"
    subprocess.run(["pythonsh", "prepare_receptor4.py", "-r", receptor_pdb])
    subprocess.run(["pythonsh", "prepare_ligand4.py", "-l", ligand_pdb])
    subprocess.run(["pythonsh", "prepare_gpf4.py", "-r", receptor_pdbqt, "-l", ligand_pdbqt,"-p", grid_center, "-p", npts])
    subprocess.run(["./autogrid4", "-p", gpf, "-l", glg])

# Print xyz coordinates of grids generated by autogrid    
def print_grid(xyz_grid_file, grid_space, grid_center, npts):
    xyz_min = grid_center - npts/2 * grid_space
    xyz_max = grid_center + npts/2 * grid_space
    xyz = xyz_min.copy()
    fh = open(xyz_grid_file, 'w')
    while xyz[2] <= xyz_max[2]:
        while xyz[1] <= xyz_max[1]:
            while xyz[0] <= xyz_max[0]:
                grid_npts = str(xyz[0]) + ' ' + str(xyz[1]) + ' ' + str(xyz[2]) + '\n'
                print(grid_npts)
                fh.write("%.3f" % grid_npts)
                xyz[0] = xyz[0] + grid_space
            xyz[0] = xyz_min[0]
            xyz[1] = xyz[1] + grid_space
        xyz[1] = xyz_min[1]
        xyz[2] = xyz[2] + grid_space
    fh.close()

# Get the xyz grid position of the buriness
def get_position(grid_space, maps_xyz_file):
    x_coordinates, y_coordinates, z_coordinates = np.loadtxt('pocket_r.pdb', usecols=(6,7,8), unpack=True)
    xyz_min, xyz_max = np.loadtxt(maps_xyz_file, unpack=True)
    n_x = (x_coordinates-xyz_min[0])/grid_space
    n_y = (y_coordinates-xyz_min[1])/grid_space
    n_z = (z_coordinates-xyz_min[2])/grid_space
    return n_x, n_y, n_z



if __name__ == "__main__":    
    #Input parameters
    #receptor_pdb = input("Please enter the pdb file for the receptor: ")
    #ligand_pdb = input("Please enter the pdb file for the ligand: ")
    grid_space = input("Please enter the grid space (unit: angstrom), default:1.0 angstrom ") or "1.0"
    #number_of_pockets = input("Please enter the number of pockets, default: 3 ") or "3"
    #SSS_threshold = input("Please enter the threshold for SSS event, from 3 to 7, default: 5 ") or "5"
    #surface_density = input("Please enter the density (dots/A^2) to calculate the surface vertex, default: 0.5 ") or "0.5"

    #Run LigSite
    #process_lcs(receptor_pdb, grid_space, number_of_pockets, SSS_threshold, surface_density)
    
    #Get mass center coordinates and number of points from ligsite output file
    mass_center_coordinates = get_orig()
    grid_center = "gridcenter=" + str(mass_center_coordinates[0]) + ","+ str(mass_center_coordinates[1]) + "," + str(mass_center_coordinates[2]) 
    npts = get_npts()
    grid_npts = "npts=" + str(npts[0])+ "," + str(npts[1]) + "," + str(npts[2])
    
    #Print grid coordinates
    print_grid("xyz_grid.txt", grid_space, mass_center_coordinates, npts)
 
    #Run autogrid  
    #process_autogrid(receptor_pdb, ligand_pdb, grid_center, grid_npts)
    
    n_x, n_y, n_z = get_position(0.375, "1dwd.maps.xyz")
    
    print(n_x)
    print(n_y)
    print(n_z)
        
    print("Job is DONE!")
    
    
    
